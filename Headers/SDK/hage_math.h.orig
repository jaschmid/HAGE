/********************************************************/
/* FILE: HageMath.h                                     */
/* DESCRIPTION: Defines common math structures          */
/* AUTHOR: Jan Schmid (jaschmid@eml.cc)                 */
/********************************************************/ 

#ifndef HAGE__MAIN__HEADER
#error Do not include this file directly, include HAGE.h instead
#endif

#ifndef HAGE_MATH_H_INCLUDED
#define HAGE_MATH_H_INCLUDED

#include "types.h"
<<<<<<< HEAD
#include <limits>
#include <cmath>

namespace HAGE {

template<typename _T> const _T Zero()
{
	return (_T)0.0;
}
template<typename _T> const _T One()
{
	return (_T)1.0;
}
template<typename _T> const _T NaN()
{
	return (_T)std::numeric_limits<_T>::quiet_NaN();
}

template<typename _T> bool IsZero(const _T& v)
{
	return v == Zero<_T>();
}
template<typename _T> bool IsOne(const _T& v)
{
	return v == One<_T>();
}
template<typename _T> bool IsNaN(const _T& v)
{
	return v != v;
}


template<typename _T = f32> struct Vector2
{
public:
	union
	{
		_T c[2];
		struct
		{
			_T x,y;
		};
	};

	// access functions

	_T& operator[](const up& i)
	{
		return c[i];
	}

	// const access functions

	const _T& operator[](const up& i) const
	{
		return c[i];
	}

	// constructors

	Vector2(const _T& _1,const _T& _2) : x(_1),y(_2)
	{
	}

	template<class _T2> Vector2(_T2 _1,_T2 _2) : x((const _T&)_1),y((const _T&)_2)
	{
	}

	Vector2(){};

	// math operations
	// scalar

	template<class _T2> Vector2<_T> operator *(const _T2& v) const
	{
		return Vector2<_T>(c[0] * (_T)v,c[1] * (_T)v);
	}

	template<class _T2> Vector2<_T> operator /(const _T2& v) const
	{
		return Vector2<_T>(c[0] / (_T)v,c[1] / (_T)v);
	}

	// vector

	template<class _T2> Vector2<_T> operator +(const Vector2<_T2>& v) const
	{
		return Vector2<_T>(c[0] + (_T)v[0],c[1] + (_T)v[1]);
	}

	template<class _T2> Vector2<_T> operator -(const Vector2<_T2>& v) const
	{
		return Vector2<_T>(c[0] - (_T)v[0],c[1] - (_T)v[1]);
	}

	template<class _T2> Vector2<_T> operator &(const Vector2<_T2>& v) const
	{
		return Vector2<_T>(c[0] * (_T)v[0],c[1] * (_T)v[1]);
	}

	template<class _T2> Vector2<_T> operator |(const Vector2<_T2>& v) const
	{
		return Vector2<_T>(c[0] / (_T)v[0],c[1] / (_T)v[1]);
	}

	template<class _T2> _T operator *(const Vector2<_T2>& v) const
	{
		return _T(c[0] * (_T)v[0] + c[1] * (_T)v[1]);
	}

	template<class _T2> _T operator %(const Vector2<_T2>& v) const
	{
		return _T(c[0] * (_T)v[1] - c[0] * (_T)v[1]);
	}

	_T& operator!() const
	{
		return c[0]*c[0]+c[1]*c[1];
	}

	Vector2<_T>& operator-() const
	{
		return Vector2<_T>(-c[0],-c[1]);
	}
};

template<typename _T = f32> struct Vector3
{
public:
	union
	{
		_T c[3];
		struct
		{
			_T x,y,z;
		};
	};

	// access functions

	Vector2<_T>& xy()
	{
		return *(Vector2<_T>*)&c[0];
	}
	Vector2<_T>& yz()
	{
		return *(Vector2<_T>*)&c[1];
	}
	_T& operator[](const up& i)
	{
		return c[i];
	}

	// const access functions

	const Vector2<_T>& xy() const
	{
		return *(const Vector2<_T>*)&c[0];
	}
	const Vector2<_T>& yz() const
	{
		return *(const Vector2<_T>*)&c[1];
	}
	const Vector2<_T>& xz() const
	{
		return Vector2<_T>(c[0],c[1]);
	}
	const _T& operator[](const up& i) const
	{
		return c[i];
	}

	// constructors

	Vector3(const _T& _1,const _T& _2,const _T& _3) : x(_1),y(_2),z(_3)
	{
	}

	template<class _T2> Vector3(const _T2& _1,const _T2& _2,const _T2& _3) : x((const _T&)_1),y((const _T&)_2),z((const _T&)_3)
	{
	}

	template<class _T2> Vector3(const Vector2<_T2>& _v,const _T2& _3) : x((const _T&)_v.x),y((const _T&)_v.y),z((const _T&)_3)
	{
	}

	template<class _T2> Vector3(const _T2& _1,const Vector2<_T2>& _v) : x((const _T&)_1),y((const _T&)_v.x),z((const _T&)_v.y)
	{
	}
	
	template<class _T2> Vector3(const Vector3<_T2>& _v) : x((const _T&)_v.x),y((const _T&)_v.y),z((const _T&)_v.z)
	{
	}

	Vector3(){};

	//comparison

	bool operator ==(const Vector3<_T>& v2)
	{
		return (x==v2.x) && (y==v2.y) && (z==v2.z);
	}
	
	template<class _T2> Vector3<_T>& operator = (const Vector3<_T2>& _v) 
	{
		x = ((const _T&)_v.x);
		y = ((const _T&)_v.y);
		z = ((const _T&)_v.z);
		return *this;
	}

	// math operations
	// scalar

	template<class _T2> Vector3<_T> operator *(const _T2& v) const
	{
		return Vector3<_T>(c[0] * (_T)v,c[1] * (_T)v,c[2] * (_T)v);
	}

	template<class _T2> Vector3<_T> operator /(const _T2& v) const
	{
		return Vector3<_T>(c[0] / (_T)v,c[1] / (_T)v,c[2] / (_T)v);
	}

	// vector

	template<class _T2> Vector3<_T> operator +(const Vector3<_T2>& v) const
	{
		return Vector3<_T>(c[0] + (_T)v[0],c[1] + (_T)v[1], c[2] + (_T)v[2]);
	}

	template<class _T2> Vector3<_T> operator -(const Vector3<_T2>& v) const
	{
		return Vector3<_T>(c[0] - (_T)v[0],c[1] - (_T)v[1], c[2] - (_T)v[2]);
	}

	template<class _T2> Vector3<_T> operator &(const Vector3<_T2>& v) const
	{
		return Vector3<_T>(c[0] * (_T)v[0],c[1] * (_T)v[1], c[2] * (_T)v[2]);
	}

	template<class _T2> Vector3<_T> operator |(const Vector3<_T2>& v) const
	{
		return Vector3<_T>(c[0] / (_T)v[0],c[1] / (_T)v[1], c[2] / (_T)v[2]);
	}

	template<class _T2> Vector3<_T> operator +=(const Vector3<_T2>& v)
	{
		c[0]+=v.c[0];c[1]+=v.c[1];c[2]+=v.c[2];
		return *this;
	}
	template<class _T2> Vector3<_T> operator -=(const Vector3<_T2>& v)
	{
		c[0]-=v.c[0];c[1]-=v.c[1];c[2]-=v.c[2];
		return *this;
	}
	template<class _T2> Vector3<_T> operator &=(const Vector3<_T2>& v)
	{
		c[0]*=v.c[0];c[1]*=v.c[1];c[2]*=v.c[2];
		return *this;
	}
	template<class _T2> Vector3<_T> operator |=(const Vector3<_T2>& v)
	{
		c[0]/=v.c[0];c[1]/=v.c[1];c[2]/=v.c[2];
		return *this;
	}

	template<class _T2> _T operator *(const Vector3<_T2>& v) const
	{
		return (_T)(c[0] * (_T)v[0] + c[1] * (_T)v[1] + c[2] * (_T)v[2]);
	}

	template<class _T2> Vector3<_T> operator %(const Vector3<_T2>& v) const
	{
		return Vector3<_T>(c[1] * (_T)v[2] - c[2] * (_T)v[1], c[2] * (_T)v[0] - c[0] * (_T)v[2], c[0] * (_T)v[1] - c[1] * (_T)v[0]);
	}

	_T operator!() const
	{
		return c[0]*c[0]+c[1]*c[1]+c[2]*c[2];
	}

	Vector3<_T> operator-() const
	{
		return Vector3<_T>(-c[0],-c[1],-c[2]);
	}

	Vector3<_T> normalize() const
	{
		return (*this)/(sqrtf(!(*this)));
	}

	float length() const
	{
		return (float)sqrtf((float)!(*this));
	}

	float sqLength() const
	{
		return !(*this);
	}
};

template<typename _T = f32> struct Vector4
{
public:
	union
	{
		_T c[4];
		struct
		{
			_T x,y,z,w;
		};
	};

	// access functions

	Vector3<_T>& xyz()
	{
		return *(Vector3<_T>*)&c[0];
	}
	Vector3<_T>& yzw()
	{
		return *(Vector3<_T>*)&c[1];
	}
	_T& operator[](const up& i)
	{
		return c[i];
	}

	// const access functions

	const Vector3<_T>& xyz() const
	{
		return *(const Vector3<_T>*)&c[0];
	}
	const Vector3<_T>& yzw() const
	{
		return *(const Vector3<_T>*)&c[1];
	}
	const _T& operator[](const up& i) const
	{
		return c[i];
	}

	// constructors

	Vector4(const _T& _1,const _T& _2,const _T& _3,const _T& _4) : x(_1),y(_2),z(_3),w(_4)
	{
	}

	template<class _T2> Vector4(const Vector3<_T2>& _v,const _T& _4) : x((_T)_v.x),y((_T)_v.y),z((_T)_v.z),w(_4)
	{
	}
	
	template<class _T2> Vector4(const Vector4<_T2>& _v) : x((_T)_v.x),y((_T)_v.y),z((_T)_v.z),w((_T)_v.w)
	{
	}

	template<class _T2> Vector4(const _T2& _1,const _T2& _2,const _T2& _3,const _T2& _4) : x((const _T&)_1),y((const _T&)_2),z((const _T&)_3),w((const _T&)_4)
	{
	}

	Vector4()
	{
	}

	//assignment

	
	template<class _T2> Vector4<_T>& operator = (const Vector4<_T2>& _v) 
	{
		x = ((const _T&)_v.x);
		y = ((const _T&)_v.y);
		z = ((const _T&)_v.z);
		w = ((const _T&)_v.w);
		return *this;
	}

	// math operations
	// scalar

	template<class _T2> Vector4<_T> operator *(const _T2& v) const
	{
		return Vector4<_T>(c[0] * (_T)v,c[1] * (_T)v,c[2] * (_T)v, c[3] * (_T)v);
	}

	template<class _T2> Vector4<_T> operator /(const _T2& v) const
	{
		return Vector4<_T>(c[0] / (_T)v,c[1] / (_T)v,c[2] / (_T)v, c[3] / (_T)v);
	}

	// vector

	template<class _T2> Vector4<_T> operator +(const Vector4<_T2>& v) const
	{
		return Vector4<_T>(c[0] + (_T)v[0],c[1] + (_T)v[1], c[2] + (_T)v[2], c[3] + (_T)v[3]);
	}

	template<class _T2> Vector4<_T> operator -(const Vector4<_T2>& v) const
	{
		return Vector4<_T>(c[0] - (_T)v[0],c[1] - (_T)v[1], c[2] - (_T)v[2], c[3] - (_T)v[3]);
	}

	template<class _T2> Vector4<_T> operator &(const Vector4<_T2>& v) const
	{
		return Vector4<_T>(c[0] * (_T)v[0],c[1] * (_T)v[1], c[2] * (_T)v[2], c[3] * (_T)v[3]);
	}

	template<class _T2> Vector4<_T> operator |(const Vector4<_T2>& v) const
	{
		return Vector4<_T>(c[0] / (_T)v[0],c[1] / (_T)v[1], c[2] / (_T)v[2], c[3] / (_T)v[3]);
	}

	template<class _T2> _T operator *(const Vector4<_T2>& v) const
	{
		return _T(c[0] * (_T)v[0] + c[1] * (_T)v[1] + c[2] * (_T)v[2] + c[3] * (_T)v[3]);
	}

	_T& operator!() const
	{
		return c[0]*c[0]+c[1]*c[1]+c[2]*c[2]+c[3]*c[3];
	}

	Vector3<_T>& operator-() const
	{
		return Vector3<_T>(-c[0],-c[1],-c[2],-c[3]);
	}
};

template<class _T = f32> struct Matrix4
{
	union
	{
		_T			v[16];
	};

	// constructors

	Matrix4()
	{
	}

	template<class _T2> Matrix4(const Matrix4<_T2>& other)
	{
		for(int i=0;i<16;++i)
			v[i]=(_T)other.v[i];
	}

	template<class _T2> Matrix4(const Vector4<_T2>& r1,const Vector4<_T2>& r2,const Vector4<_T2>& r3,const Vector4<_T2>& r4)
	{
		Row(0)=(Vector4<_T>)r1;
		Row(1)=(Vector4<_T>)r2;
		Row(2)=(Vector4<_T>)r3;
		Row(3)=(Vector4<_T>)r4;
	}

	static const Matrix4<_T> One()
	{
		return Matrix4(
			Vector4<_T>(1.0f,0.0f,0.0f,0.0f),
			Vector4<_T>(0.0f,1.0f,0.0f,0.0f),
			Vector4<_T>(0.0f,0.0f,1.0f,0.0f),
			Vector4<_T>(0.0f,0.0f,0.0f,1.0f)
		);
	}

	static const Matrix4<_T> Zero()
	{
		return Matrix4(
			Vector4<_T>(0.0f,0.0f,0.0f,0.0f),
			Vector4<_T>(0.0f,0.0f,0.0f,0.0f),
			Vector4<_T>(0.0f,0.0f,0.0f,0.0f),
			Vector4<_T>(0.0f,0.0f,0.0f,0.0f)
		);
	}
	

	static const Matrix4<_T> NaN()
	{
		_T nan = HAGE::NaN<_T>();
		return Matrix4(
			Vector4<_T>(nan,nan,nan,nan),
			Vector4<_T>(nan,nan,nan,nan),
			Vector4<_T>(nan,nan,nan,nan),
			Vector4<_T>(nan,nan,nan,nan)
		);
	}

	static const Matrix4<_T> OuterProduct(const Vector4<_T>& v1,const Vector4<_T>& v2)
	{
		Matrix4<_T> result;

		for(int ir = 0; ir < 4; ir ++)
			for(int ic = 0; ic < 4; ic ++)
				result.v[ir*4+ic] = v1.c[ir] * v2.c[ic];

		return result;
	}

	static const Matrix4<_T> Translate(const Vector3<_T>& v)
	{
		return Matrix4(
			Vector4<_T>(1.0f,0.0f,0.0f,v.x),
			Vector4<_T>(0.0f,1.0f,0.0f,v.y),
			Vector4<_T>(0.0f,0.0f,1.0f,v.z),
			Vector4<_T>(0.0f,0.0f,0.0f,1.0f)
		);
	}

	static const Matrix4<_T> LookAt(const Vector3<_T>& eye,const Vector3<_T>& at,const Vector3<_T>& up)
	{
		Vector3<> zaxis = (at - eye).normalize();
		Vector3<> xaxis = (up % zaxis).normalize();
		Vector3<> yaxis = (zaxis % xaxis);
		return Matrix4(
			Vector4<_T>(xaxis,-(xaxis*eye)),
			Vector4<_T>(yaxis,-(yaxis*eye)),
			Vector4<_T>(zaxis,-(zaxis*eye)),
			Vector4<_T>(0.0f,0.0f,0.0f,1.0f)
		);
	}

	static const Matrix4<_T> Scale(const Vector3<_T>& v)
	{
		return Matrix4(
			Vector4<_T>(v.x ,0.0f,0.0f,0.0f),
			Vector4<_T>(0.0f,v.y ,0.0f,0.0f),
			Vector4<_T>(0.0f,0.0f,v.z ,0.0f),
			Vector4<_T>(0.0f,0.0f,0.0f,1.0f)
		);
	}
	static const Matrix4<_T> AngleRotation(const Vector3<_T>& a,const _T& angle)
	{
		_T _cos = cos(angle);
		_T _1cos = 1.0f - _cos;
		_T _sin = sin(angle);
		return Matrix4(
			Vector4<_T>(_cos + a.x*a.x*_1cos ,		a.x*a.y*_1cos - a.z*_sin,	a.x*a.z*_1cos + a.y*_sin,	0.0f),
			Vector4<_T>(a.y*a.x*_1cos + a.z*_sin,	_cos + a.y*a.y*_1cos,		a.y*a.z*_1cos - a.x*_sin,	0.0f),
			Vector4<_T>(a.z*a.x*_1cos - a.y*_sin,	a.z*a.y*_1cos + a.x*_sin,	a.z*a.z*_1cos + _cos,		0.0f),
			Vector4<_T>(0.0f,						0.0f,						0.0f,						1.0f)
		);
	}

	// basic operations

	template<class _T2> const Matrix4<_T> operator *(const Matrix4<_T2>& other) const
	{
		Matrix4<_T> res;
		for(int ir =0;ir<4;++ir)
			for(int ic =0;ic<4;++ic)
				res.v[ir*4+ic]=Row(ir)*other.Column(ic);
		return res;
	}

	
	template<class _T2> Matrix4<_T>& operator *=(const Matrix4<_T2>& other)
	{
		Matrix4<_T> copy = *this;
		for(int ir =0;ir<4;++ir)
			for(int ic =0;ic<4;++ic)
				v[ir*4+ic]=copy.Row(ir)*other.Column(ic);
		return *this;
	}

	const Matrix4<_T> operator *(const _T& other) const
	{
		Matrix4<_T> res;
		for(int ir =0;ir<4;++ir)
			for(int ic =0;ic<4;++ic)
				res.v[ir*4+ic]=v[ir*4+ic]*other;
		return res;
	}

	
	Matrix4<_T>& operator *=(const _T& other)
	{
		Matrix4<_T> copy = *this;
		for(int ir =0;ir<4;++ir)
			for(int ic =0;ic<4;++ic)
				v[ir*4+ic]*=other;
		return *this;
	}
	
	template<class _T2> const Matrix4<_T> operator +(const Matrix4<_T2>& other) const
	{
		Matrix4<_T> res;
		for(int ir =0;ir<4;++ir)
			for(int ic =0;ic<4;++ic)
				res.v[ir*4+ic]=v[ir*4+ic] + other.v[ir*4+ic];
		return res;
	}

	
	template<class _T2> Matrix4<_T>& operator +=(const Matrix4<_T2>& other)
	{
		for(int ir =0;ir<4;++ir)
			for(int ic =0;ic<4;++ic)
				v[ir*4+ic]+=other.v[ir*4+ic];
		return *this;
	}

	template<class _T2> const Vector4<_T> operator *(const Vector4<_T2>& other) const
	{
		Vector4<_T> res;
		for(int ir =0;ir<4;++ir)
			res[ir]=Row(ir)*other;
		return res;
	}

	//status operators

	bool IsNaN() const
	{
		return HAGE::IsNaN(v[0]);
	}

	operator bool() const
	{
		return IsNaN();
	}

	// access operators
	Vector4<_T>& Row(const u32& i)
	{
		return *(Vector4<_T>*)&v[i*4];
	}
	const Vector4<_T>& Row(const u32& i) const
	{
		return *(const Vector4<_T>*)&v[i*4];
	}
	const Vector4<_T> Column(const u32& i) const
	{
		return Vector4<_T>(v[i],v[4+i],v[8+i],v[12+i]);
	}

	const Matrix4<_T> Transpose() const
	{
		return Matrix4(
			Vector4<_T>(v[0],v[4],v[8], v[12]),
			Vector4<_T>(v[1],v[5],v[9], v[13]),
			Vector4<_T>(v[2],v[6],v[10],v[14]),
			Vector4<_T>(v[3],v[7],v[11],v[15])
		);
	}

	// advanced operations

	//Invert code from Intel paper Streaming SIMD Extensions - Inverse of 4x4 Matrix (Ref AP-928)
	const Matrix4<_T> Invert(_T* pDet = nullptr) const
	{
		_T tmp[12];
		_T det;
		Matrix4<_T> result;
		const Matrix4<_T> transpose = Transpose();

		const _T* src = transpose.v;
		_T* dst = result.v;

		/* calculate pairs for first 8 elements (cofactors) */
		tmp[0]  = src[10] * src[15];
		tmp[1]  = src[11] * src[14];
		tmp[2]  = src[9]  * src[15];
		tmp[3]  = src[11] * src[13];
		tmp[4]  = src[9]  * src[14];
		tmp[5]  = src[10] * src[13];
		tmp[6]  = src[8]  * src[15];
		tmp[7]  = src[11] * src[12];
		tmp[8]  = src[8]  * src[14];
		tmp[9]  = src[10] * src[12];
		tmp[10] = src[8]  * src[13];
		tmp[11] = src[9]  * src[12];

		/* calculate first 8 elements (cofactors) */
		dst[0]  = tmp[0]*src[5] + tmp[3]*src[6] + tmp[4]*src[7];
		dst[0] -= tmp[1]*src[5] + tmp[2]*src[6] + tmp[5]*src[7];
		dst[1]  = tmp[1]*src[4] + tmp[6]*src[6] + tmp[9]*src[7];
		dst[1] -= tmp[0]*src[4] + tmp[7]*src[6] + tmp[8]*src[7];
		dst[2]  = tmp[2]*src[4] + tmp[7]*src[5] + tmp[10]*src[7];
		dst[2] -= tmp[3]*src[4] + tmp[6]*src[5] + tmp[11]*src[7];
		dst[3]  = tmp[5]*src[4] + tmp[8]*src[5] + tmp[11]*src[6];
		dst[3] -= tmp[4]*src[4] + tmp[9]*src[5] + tmp[10]*src[6];

		
		/* calculate determinant */
		det=src[0]*dst[0]+src[1]*dst[1]+src[2]*dst[2]+src[3]*dst[3];

		if(pDet)
			*pDet = det;
		//return nan if determinant is zero
		if(IsZero<_T>(det))
			return Matrix4<_T>::NaN();

		det = 1/det;

		dst[4]  = tmp[1]*src[1] + tmp[2]*src[2] + tmp[5]*src[3];
		dst[4] -= tmp[0]*src[1] + tmp[3]*src[2] + tmp[4]*src[3];
		dst[5]  = tmp[0]*src[0] + tmp[7]*src[2] + tmp[8]*src[3];
		dst[5] -= tmp[1]*src[0] + tmp[6]*src[2] + tmp[9]*src[3];
		dst[6]  = tmp[3]*src[0] + tmp[6]*src[1] + tmp[11]*src[3];
		dst[6] -= tmp[2]*src[0] + tmp[7]*src[1] + tmp[10]*src[3];
		dst[7]  = tmp[4]*src[0] + tmp[9]*src[1] + tmp[10]*src[2];
		dst[7] -= tmp[5]*src[0] + tmp[8]*src[1] + tmp[11]*src[2];

		 /* calculate pairs for second 8 elements (cofactors) */
		tmp[0]  = src[2]*src[7];
		tmp[1]  = src[3]*src[6];
		tmp[2]  = src[1]*src[7];
		tmp[3]  = src[3]*src[5];
		tmp[4]  = src[1]*src[6];
		tmp[5]  = src[2]*src[5];
		tmp[6]  = src[0]*src[7];
		tmp[7]  = src[3]*src[4];
		tmp[8]  = src[0]*src[6];
		tmp[9]  = src[2]*src[4];
		tmp[10] = src[0]*src[5];
		tmp[11] = src[1]*src[4];

		/* calculate second 8 elements (cofactors) */
		dst[8]  = tmp[0]*src[13] + tmp[3]*src[14] + tmp[4]*src[15];
		dst[8] -= tmp[1]*src[13] + tmp[2]*src[14] + tmp[5]*src[15];
		dst[9]  = tmp[1]*src[12] + tmp[6]*src[14] + tmp[9]*src[15];
		dst[9] -= tmp[0]*src[12] + tmp[7]*src[14] + tmp[8]*src[15];
		dst[10] = tmp[2]*src[12] + tmp[7]*src[13] + tmp[10]*src[15];
		dst[10]-= tmp[3]*src[12] + tmp[6]*src[13] + tmp[11]*src[15];
		dst[11] = tmp[5]*src[12] + tmp[8]*src[13] + tmp[11]*src[14];
		dst[11]-= tmp[4]*src[12] + tmp[9]*src[13] + tmp[10]*src[14];
		dst[12] = tmp[2]*src[10] + tmp[5]*src[11] + tmp[1]*src[9];
		dst[12]-= tmp[4]*src[11] + tmp[0]*src[9] + tmp[3]*src[10];
		dst[13] = tmp[8]*src[11] + tmp[0]*src[8] + tmp[7]*src[10];
		dst[13]-= tmp[6]*src[10] + tmp[9]*src[11] + tmp[1]*src[8];
		dst[14] = tmp[6]*src[9] + tmp[11]*src[11] + tmp[3]*src[8];
		dst[14]-= tmp[10]*src[11] + tmp[2]*src[8] + tmp[7]*src[9];
		dst[15] = tmp[10]*src[10] + tmp[4]*src[8] + tmp[9]*src[9];
		dst[15]-= tmp[8]*src[9] + tmp[11]*src[10] + tmp[5]*src[8];
		
		/* calculate matrix inverse */
		return result*det;
	}

	const _T Determinant() const
	{
		_T tmp[12];
		_T det;
		Matrix4<_T> result;
		const Matrix4<_T> transpose = Transpose();

		const _T* src = transpose.v;
		_T* dst[4];

		/* calculate pairs for first 8 elements (cofactors) */
		tmp[0]  = src[10] * src[15];
		tmp[1]  = src[11] * src[14];
		tmp[2]  = src[9]  * src[15];
		tmp[3]  = src[11] * src[13];
		tmp[4]  = src[9]  * src[14];
		tmp[5]  = src[10] * src[13];
		tmp[6]  = src[8]  * src[15];
		tmp[7]  = src[11] * src[12];
		tmp[8]  = src[8]  * src[14];
		tmp[9]  = src[10] * src[12];
		tmp[10] = src[8]  * src[13];
		tmp[11] = src[9]  * src[12];

		/* calculate first 8 elements (cofactors) */
		dst[0]  = tmp[0]*src[5] + tmp[3]*src[6] + tmp[4]*src[7];
		dst[0] -= tmp[1]*src[5] + tmp[2]*src[6] + tmp[5]*src[7];
		dst[1]  = tmp[1]*src[4] + tmp[6]*src[6] + tmp[9]*src[7];
		dst[1] -= tmp[0]*src[4] + tmp[7]*src[6] + tmp[8]*src[7];
		dst[2]  = tmp[2]*src[4] + tmp[7]*src[5] + tmp[10]*src[7];
		dst[2] -= tmp[3]*src[4] + tmp[6]*src[5] + tmp[11]*src[7];
		dst[3]  = tmp[5]*src[4] + tmp[8]*src[5] + tmp[11]*src[6];
		dst[3] -= tmp[4]*src[4] + tmp[9]*src[5] + tmp[10]*src[6];

		/* calculate determinant */
		det=src[0]*dst[0]+src[1]*dst[1]+src[2]*dst[2]+src[3]*dst[3];

		return det;
	}

	// Originally based on public domain code by <Ajay_Shah@rand.org>
	// which can be found at http://lib.stat.cmu.edu/general/ajay
	/*
	  Inputs:
	  N, integer
	  A, N x N matrix _indexed_from_1_
	  Returns:
	  U, N x N matrix, _indexed_from_1_, you must allocate before
	  calling this routine,
	  nullity, integer
	*/

	const Matrix4<_T> Cholesky() const
	{
	  Matrix4<_T> U = Matrix4<_T>::Zero();
	  Matrix4<_T> A = *this;
	  static const _T TOOSMALL ((_T) 0.0);
	  static const int N = 4;
	  int nullity = 0;
	  int row, j, k;
	  _T sum;

	  for (row=0; row<N; row++) {
		sum = A.v[row*4+row];
		for (j=0; j<=(row-1); j++) sum -= U.v[j*4+row]*U.v[j*4+row];
		if (sum > TOOSMALL) {
		  U.v[row*4+row] = sqrt(sum);
		  for (k=(row+1); k<N; k++) {
			sum = A.v[row*4+k];
			for (j=0; j<=(row-1); j++)
			  sum -= U.v[j*4+row]*U.v[j*4+k];
			U.v[row*4+k] = sum/U.v[row*4+row];
		  }
		}
		else { 
		  for (k=row; k<N; k++) U.v[row*4+k] = 0.0;
		  nullity++;
		}
	  }

	  if(nullity != 0)
		  return Matrix4<_T>::NaN();

	  return U;
	}
};

}

#endif
=======
>>>>>>> 0fae41ed4e2c5bb289ffd6839b534e226bc3df82

#include "Math\MathTypes.h"
#include "Math\Binary.h"
#include "Math\Vector2.h"
#include "Math\Vector3.h"
#include "Math\Vector4.h"
#include "Math\Quaternion.h"
#include "Math\Matrix4.h"
#include "EditableMesh.h"
#include "MeshEx.h"
#include "SpatialTree.h"

#endif
